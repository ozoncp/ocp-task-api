// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ocp-task-api/ocp-task-api.proto

package oct_task_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on DescribeTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeTaskRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetTaskId() <= 0 {
		return DescribeTaskRequestValidationError{
			field:  "TaskId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribeTaskRequestValidationError is the validation error returned by
// DescribeTaskRequest.Validate if the designated constraints aren't met.
type DescribeTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeTaskRequestValidationError) ErrorName() string {
	return "DescribeTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeTaskRequestValidationError{}

// Validate checks the field values on DescribeTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeTaskResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeTaskResponseValidationError{
				field:  "Task",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeTaskResponseValidationError is the validation error returned by
// DescribeTaskResponse.Validate if the designated constraints aren't met.
type DescribeTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeTaskResponseValidationError) ErrorName() string {
	return "DescribeTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeTaskResponseValidationError{}

// Validate checks the field values on Task with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Task) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TaskId

	// no validation rules for Description

	// no validation rules for Dificulty

	return nil
}

// TaskValidationError is the validation error returned by Task.Validate if the
// designated constraints aren't met.
type TaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskValidationError) ErrorName() string { return "TaskValidationError" }

// Error satisfies the builtin error interface
func (e TaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskValidationError{}
