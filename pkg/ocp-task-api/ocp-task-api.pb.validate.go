// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ocp-task-api/ocp-task-api.proto

package oct_task_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on ListTasksV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTasksV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// ListTasksV1RequestValidationError is the validation error returned by
// ListTasksV1Request.Validate if the designated constraints aren't met.
type ListTasksV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTasksV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTasksV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTasksV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTasksV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTasksV1RequestValidationError) ErrorName() string {
	return "ListTasksV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTasksV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTasksV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTasksV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTasksV1RequestValidationError{}

// Validate checks the field values on ListTasksV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTasksV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTasks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTasksV1ResponseValidationError{
					field:  fmt.Sprintf("Tasks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListTasksV1ResponseValidationError is the validation error returned by
// ListTasksV1Response.Validate if the designated constraints aren't met.
type ListTasksV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTasksV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTasksV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTasksV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTasksV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTasksV1ResponseValidationError) ErrorName() string {
	return "ListTasksV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTasksV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTasksV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTasksV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTasksV1ResponseValidationError{}

// Validate checks the field values on CreateTaskV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTaskV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Description

	// no validation rules for Dificulty

	return nil
}

// CreateTaskV1RequestValidationError is the validation error returned by
// CreateTaskV1Request.Validate if the designated constraints aren't met.
type CreateTaskV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTaskV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTaskV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTaskV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTaskV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTaskV1RequestValidationError) ErrorName() string {
	return "CreateTaskV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTaskV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTaskV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTaskV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTaskV1RequestValidationError{}

// Validate checks the field values on CreateTaskV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTaskV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TaskId

	return nil
}

// CreateTaskV1ResponseValidationError is the validation error returned by
// CreateTaskV1Response.Validate if the designated constraints aren't met.
type CreateTaskV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTaskV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTaskV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTaskV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTaskV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTaskV1ResponseValidationError) ErrorName() string {
	return "CreateTaskV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTaskV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTaskV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTaskV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTaskV1ResponseValidationError{}

// Validate checks the field values on RemoveTaskV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveTaskV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TaskId

	return nil
}

// RemoveTaskV1RequestValidationError is the validation error returned by
// RemoveTaskV1Request.Validate if the designated constraints aren't met.
type RemoveTaskV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveTaskV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveTaskV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveTaskV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveTaskV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveTaskV1RequestValidationError) ErrorName() string {
	return "RemoveTaskV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveTaskV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveTaskV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveTaskV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveTaskV1RequestValidationError{}

// Validate checks the field values on RemoveTaskV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveTaskV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Found

	return nil
}

// RemoveTaskV1ResponseValidationError is the validation error returned by
// RemoveTaskV1Response.Validate if the designated constraints aren't met.
type RemoveTaskV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveTaskV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveTaskV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveTaskV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveTaskV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveTaskV1ResponseValidationError) ErrorName() string {
	return "RemoveTaskV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveTaskV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveTaskV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveTaskV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveTaskV1ResponseValidationError{}

// Validate checks the field values on DescribeTaskV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeTaskV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TaskId

	return nil
}

// DescribeTaskV1RequestValidationError is the validation error returned by
// DescribeTaskV1Request.Validate if the designated constraints aren't met.
type DescribeTaskV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeTaskV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeTaskV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeTaskV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeTaskV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeTaskV1RequestValidationError) ErrorName() string {
	return "DescribeTaskV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeTaskV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeTaskV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeTaskV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeTaskV1RequestValidationError{}

// Validate checks the field values on DescribeTaskV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeTaskV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeTaskV1ResponseValidationError{
				field:  "Task",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeTaskV1ResponseValidationError is the validation error returned by
// DescribeTaskV1Response.Validate if the designated constraints aren't met.
type DescribeTaskV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeTaskV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeTaskV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeTaskV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeTaskV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeTaskV1ResponseValidationError) ErrorName() string {
	return "DescribeTaskV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeTaskV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeTaskV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeTaskV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeTaskV1ResponseValidationError{}

// Validate checks the field values on Task with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Task) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TaskId

	// no validation rules for Description

	// no validation rules for Dificulty

	return nil
}

// TaskValidationError is the validation error returned by Task.Validate if the
// designated constraints aren't met.
type TaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskValidationError) ErrorName() string { return "TaskValidationError" }

// Error satisfies the builtin error interface
func (e TaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskValidationError{}
