// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package oct_task_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpTaskApiClient is the client API for OcpTaskApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpTaskApiClient interface {
	// Возвращает описание задачи по ее идентификатору
	DescribeTask(ctx context.Context, in *DescribeTaskRequest, opts ...grpc.CallOption) (*DescribeTaskResponse, error)
}

type ocpTaskApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpTaskApiClient(cc grpc.ClientConnInterface) OcpTaskApiClient {
	return &ocpTaskApiClient{cc}
}

func (c *ocpTaskApiClient) DescribeTask(ctx context.Context, in *DescribeTaskRequest, opts ...grpc.CallOption) (*DescribeTaskResponse, error) {
	out := new(DescribeTaskResponse)
	err := c.cc.Invoke(ctx, "/ocp.task.api.OcpTaskApi/DescribeTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpTaskApiServer is the server API for OcpTaskApi service.
// All implementations must embed UnimplementedOcpTaskApiServer
// for forward compatibility
type OcpTaskApiServer interface {
	// Возвращает описание задачи по ее идентификатору
	DescribeTask(context.Context, *DescribeTaskRequest) (*DescribeTaskResponse, error)
	mustEmbedUnimplementedOcpTaskApiServer()
}

// UnimplementedOcpTaskApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpTaskApiServer struct {
}

func (UnimplementedOcpTaskApiServer) DescribeTask(context.Context, *DescribeTaskRequest) (*DescribeTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTask not implemented")
}
func (UnimplementedOcpTaskApiServer) mustEmbedUnimplementedOcpTaskApiServer() {}

// UnsafeOcpTaskApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpTaskApiServer will
// result in compilation errors.
type UnsafeOcpTaskApiServer interface {
	mustEmbedUnimplementedOcpTaskApiServer()
}

func RegisterOcpTaskApiServer(s grpc.ServiceRegistrar, srv OcpTaskApiServer) {
	s.RegisterService(&OcpTaskApi_ServiceDesc, srv)
}

func _OcpTaskApi_DescribeTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTaskApiServer).DescribeTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.task.api.OcpTaskApi/DescribeTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTaskApiServer).DescribeTask(ctx, req.(*DescribeTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpTaskApi_ServiceDesc is the grpc.ServiceDesc for OcpTaskApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpTaskApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.task.api.OcpTaskApi",
	HandlerType: (*OcpTaskApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeTask",
			Handler:    _OcpTaskApi_DescribeTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-task-api/ocp-task-api.proto",
}
