// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package oct_task_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpTaskApiClient is the client API for OcpTaskApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpTaskApiClient interface {
	// Возвращает список задач
	ListTasksV1(ctx context.Context, in *ListTasksV1Request, opts ...grpc.CallOption) (*ListTasksV1Response, error)
	// Возвращает описание задачи по ее идентификатору
	DescribeTaskV1(ctx context.Context, in *DescribeTaskV1Request, opts ...grpc.CallOption) (*DescribeTaskV1Response, error)
	// Создает новую задачу
	CreateTaskV1(ctx context.Context, in *CreateTaskV1Request, opts ...grpc.CallOption) (*CreateTaskV1Response, error)
	// Удаляет задачу по идентификатору
	RemoveTaskV1(ctx context.Context, in *RemoveTaskV1Request, opts ...grpc.CallOption) (*RemoveTaskV1Response, error)
}

type ocpTaskApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpTaskApiClient(cc grpc.ClientConnInterface) OcpTaskApiClient {
	return &ocpTaskApiClient{cc}
}

func (c *ocpTaskApiClient) ListTasksV1(ctx context.Context, in *ListTasksV1Request, opts ...grpc.CallOption) (*ListTasksV1Response, error) {
	out := new(ListTasksV1Response)
	err := c.cc.Invoke(ctx, "/ocp.task.api.OcpTaskApi/ListTasksV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpTaskApiClient) DescribeTaskV1(ctx context.Context, in *DescribeTaskV1Request, opts ...grpc.CallOption) (*DescribeTaskV1Response, error) {
	out := new(DescribeTaskV1Response)
	err := c.cc.Invoke(ctx, "/ocp.task.api.OcpTaskApi/DescribeTaskV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpTaskApiClient) CreateTaskV1(ctx context.Context, in *CreateTaskV1Request, opts ...grpc.CallOption) (*CreateTaskV1Response, error) {
	out := new(CreateTaskV1Response)
	err := c.cc.Invoke(ctx, "/ocp.task.api.OcpTaskApi/CreateTaskV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpTaskApiClient) RemoveTaskV1(ctx context.Context, in *RemoveTaskV1Request, opts ...grpc.CallOption) (*RemoveTaskV1Response, error) {
	out := new(RemoveTaskV1Response)
	err := c.cc.Invoke(ctx, "/ocp.task.api.OcpTaskApi/RemoveTaskV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpTaskApiServer is the server API for OcpTaskApi service.
// All implementations must embed UnimplementedOcpTaskApiServer
// for forward compatibility
type OcpTaskApiServer interface {
	// Возвращает список задач
	ListTasksV1(context.Context, *ListTasksV1Request) (*ListTasksV1Response, error)
	// Возвращает описание задачи по ее идентификатору
	DescribeTaskV1(context.Context, *DescribeTaskV1Request) (*DescribeTaskV1Response, error)
	// Создает новую задачу
	CreateTaskV1(context.Context, *CreateTaskV1Request) (*CreateTaskV1Response, error)
	// Удаляет задачу по идентификатору
	RemoveTaskV1(context.Context, *RemoveTaskV1Request) (*RemoveTaskV1Response, error)
	mustEmbedUnimplementedOcpTaskApiServer()
}

// UnimplementedOcpTaskApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpTaskApiServer struct {
}

func (UnimplementedOcpTaskApiServer) ListTasksV1(context.Context, *ListTasksV1Request) (*ListTasksV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasksV1 not implemented")
}
func (UnimplementedOcpTaskApiServer) DescribeTaskV1(context.Context, *DescribeTaskV1Request) (*DescribeTaskV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTaskV1 not implemented")
}
func (UnimplementedOcpTaskApiServer) CreateTaskV1(context.Context, *CreateTaskV1Request) (*CreateTaskV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskV1 not implemented")
}
func (UnimplementedOcpTaskApiServer) RemoveTaskV1(context.Context, *RemoveTaskV1Request) (*RemoveTaskV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTaskV1 not implemented")
}
func (UnimplementedOcpTaskApiServer) mustEmbedUnimplementedOcpTaskApiServer() {}

// UnsafeOcpTaskApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpTaskApiServer will
// result in compilation errors.
type UnsafeOcpTaskApiServer interface {
	mustEmbedUnimplementedOcpTaskApiServer()
}

func RegisterOcpTaskApiServer(s grpc.ServiceRegistrar, srv OcpTaskApiServer) {
	s.RegisterService(&OcpTaskApi_ServiceDesc, srv)
}

func _OcpTaskApi_ListTasksV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTaskApiServer).ListTasksV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.task.api.OcpTaskApi/ListTasksV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTaskApiServer).ListTasksV1(ctx, req.(*ListTasksV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpTaskApi_DescribeTaskV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTaskV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTaskApiServer).DescribeTaskV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.task.api.OcpTaskApi/DescribeTaskV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTaskApiServer).DescribeTaskV1(ctx, req.(*DescribeTaskV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpTaskApi_CreateTaskV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTaskApiServer).CreateTaskV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.task.api.OcpTaskApi/CreateTaskV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTaskApiServer).CreateTaskV1(ctx, req.(*CreateTaskV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpTaskApi_RemoveTaskV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTaskV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpTaskApiServer).RemoveTaskV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.task.api.OcpTaskApi/RemoveTaskV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpTaskApiServer).RemoveTaskV1(ctx, req.(*RemoveTaskV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpTaskApi_ServiceDesc is the grpc.ServiceDesc for OcpTaskApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpTaskApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.task.api.OcpTaskApi",
	HandlerType: (*OcpTaskApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTasksV1",
			Handler:    _OcpTaskApi_ListTasksV1_Handler,
		},
		{
			MethodName: "DescribeTaskV1",
			Handler:    _OcpTaskApi_DescribeTaskV1_Handler,
		},
		{
			MethodName: "CreateTaskV1",
			Handler:    _OcpTaskApi_CreateTaskV1_Handler,
		},
		{
			MethodName: "RemoveTaskV1",
			Handler:    _OcpTaskApi_RemoveTaskV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-task-api/ocp-task-api.proto",
}
